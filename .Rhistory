df$B[id_B,] <- 1
}
if (n_frames == 3) {
df <- data.frame(y = y, A = NULL, B = NULL, C = NULL, domain = NULL)
}
return(df)
}
produce_dataframe(100, overlap_size = 0.5, n_frame = 2)
overlap_size = 0.5
n_frames = 2
N = 100
y <- rnorm(N)
id <- 1:N
n_frames == 2
N_A <- N/2+N*overlap_size
N_A
id_A <- sort(sample(1:N, N_A))
id_A
id_B <- sort(!(id %in% id_A))
df
df <- data.frame(id = 1:N, y = y)
df
df$A[id_A,] <- 1
df[id_A,]$A <- 1
df
df[id_A,]
df[id_A,]$A
df <- data.frame(id = 1:N, y = y, A, B)
df <- data.frame(id = 1:N, y = y, A = numeric(N), B = numeric(N))
df[id_A,]$A <- 1
df$B[id_B,] <- 1
overlap_size = 0.2
y <- rnorm(N)
id <- 1:N
if (n_frames == 2) {
N_A <- N/2+N*overlap_size
id_A <- sort(sample(1:N, N_A))
id_B <- sort(!(id %in% id_A))
df <- data.frame(id = 1:N, y = y, A = numeric(N), B = numeric(N))
df[id_A,]$A <- 1
df[id_B,]$B <- 1
}
df
N_A
id_A <- sort(sample(1:N, N_A))
id_A
sample(1:N, N_A)
id_A <- sort(sample(1:N, N_A))
id_B <- sort(!(id %in% id_A))
id_A
id_B
!(id %in% id_A)
id*!(id %in% id_A)
id_B <- sort(id[!(id %in% id_A)])
id_B
df <- data.frame(id = 1:N, y = y, A = numeric(N), B = numeric(N))
df[id_A,]$A <- 1
df[id_B,]$B <- 1
df
id_A <- sort(sample(1:N, N_A))
id_B <- sort(c(id[!(id %in% id_A)], sample(id_A, N*overlap_size)))
df <- data.frame(id = 1:N, y = y, A = numeric(N), B = numeric(N))
df[id_A,]$A <- 1
df[id_B,]$B <- 1
df
length(df)
nrow(df)
nrow(df[df$A == 1 & df$B == 1,])
produce_dataframe(100, overlap_size = 0.2, n_frame = 2)
produce_dataframe <- function(N, overlap_size, n_frames) {
y <- rnorm(N)
id <- 1:N
if (n_frames == 2) {
N_A <- N/2+N*overlap_size
id_A <- sort(sample(1:N, N_A))
id_B <- sort(c(id[!(id %in% id_A)], sample(id_A, N*overlap_size)))
df <- data.frame(id = 1:N, y = y, A = numeric(N), B = numeric(N))
df[id_A,]$A <- 1
df[id_B,]$B <- 1
}
if (n_frames == 3) {
df <- data.frame(y = y, A = NULL, B = NULL, C = NULL, domain = NULL)
}
return(df)
}
produce_dataframe(100, overlap_size = 0.2, n_frame = 2)
produce_dataframe <- function(N, overlap_size, n_frames) {
y <- rnorm(N)
id <- 1:N
if (n_frames == 2) {
N_A <- N/2+N*overlap_size
id_A <- sort(sample(1:N, N_A))
id_B <- sort(c(id[!(id %in% id_A)], sample(id_A, N*overlap_size)))
df <- data.frame(id = 1:N, y = y, A = numeric(N), B = numeric(N))
df[id_A,]$A <- 1
df[id_B,]$B <- 1
}
if (n_frames != 2) {
print("non ancora sviluppato quando numero di frames > 2")
}
return(df)
}
produce_dataframe(100, overlap_size = 0.2, n_frame = 3)
produce_dataframe(100, overlap_size = 0.2, n_frame = 3)
produce_dataframe <- function(N, overlap_size, n_frames) {
y <- rnorm(N)
id <- 1:N
if (n_frames == 2) {
N_A <- N/2+N*overlap_size
id_A <- sort(sample(1:N, N_A))
id_B <- sort(c(id[!(id %in% id_A)], sample(id_A, N*overlap_size)))
df <- data.frame(id = 1:N, y = y, A = numeric(N), B = numeric(N))
df[id_A,]$A <- 1
df[id_B,]$B <- 1
}
if (n_frames != 2) {
print("non ancora sviluppato quando numero di frames > 2")
}
return(df)
}
produce_dataframe <- function(N, overlap_size, n_frames) {
y <- rnorm(N)
id <- 1:N
if (n_frames == 2) {
N_A <- N/2+N*overlap_size
id_A <- sort(sample(1:N, N_A))
id_B <- sort(c(id[!(id %in% id_A)], sample(id_A, N*overlap_size)))
df <- data.frame(id = 1:N, y = y, A = numeric(N), B = numeric(N))
df[id_A,]$A <- 1
df[id_B,]$B <- 1
}
return(df)
if (n_frames != 2) {
print("non ancora sviluppato quando numero di frames > 2")
}
}
produce_dataframe(100, overlap_size = 0.2, n_frame = 3)
produce_dataframe <- function(N, overlap_size, n_frames) {
y <- rnorm(N)
id <- 1:N
if (n_frames == 2) {
N_A <- N/2+N*overlap_size
id_A <- sort(sample(1:N, N_A))
id_B <- sort(c(id[!(id %in% id_A)], sample(id_A, N*overlap_size)))
df <- data.frame(id = 1:N, y = y, A = numeric(N), B = numeric(N))
df[id_A,]$A <- 1
df[id_B,]$B <- 1
}
return(df)
if (n_frames != 2) {
print("non ancora sviluppato quando numero di frames > 2")
}
}
produce_dataframe(100, overlap_size = 0.2, n_frame = 3)
produce_dataframe(100, overlap_size = 0.2, n_frame = 3)
produce_dataframe <- function(N, overlap_size, n_frames) {
y <- rnorm(N)
id <- 1:N
if (n_frames == 2) {
N_A <- N/2+N*overlap_size
id_A <- sort(sample(1:N, N_A))
id_B <- sort(c(id[!(id %in% id_A)], sample(id_A, N*overlap_size)))
df <- data.frame(id = 1:N, y = y, A = numeric(N), B = numeric(N))
df[id_A,]$A <- 1
df[id_B,]$B <- 1
}
if (n_frames != 2) {
print("non ancora sviluppato quando numero di frames > 2")
}
return(df)
}
produce_dataframe(100, overlap_size = 0.2, n_frame = 3)
df[id_A,]$A <- 1
produce_dataframe <- function(N, overlap_size, n_frames) {
y <- rnorm(N)
id <- 1:N
if (n_frames == 2) {
N_A <- N/2+N*overlap_size
id_A <- sort(sample(1:N, N_A))
id_B <- sort(c(id[!(id %in% id_A)], sample(id_A, N*overlap_size)))
df <- data.frame(id = 1:N, y = y, A = numeric(N), B = numeric(N))
df[id_A,]$A <- 1
df[id_B,]$B <- 1
return(df)
}
if (n_frames != 2) {
print("non ancora sviluppato quando numero di frames > 2")
}
}
produce_dataframe(100, overlap_size = 0.2, n_frame = 3)
produce_dataframe <- function(N, overlap_size, n_frames) {
y <- rnorm(N)
id <- 1:N
if (n_frames == 2) {
N_A <- N/2+N*overlap_size
id_A <- sort(sample(1:N, N_A))
id_B <- sort(c(id[!(id %in% id_A)], sample(id_A, N*overlap_size)))
df <- data.frame(id = 1:N, y = y, A = numeric(N), B = numeric(N))
df[id_A,]$A <- 1
df[id_B,]$B <- 1
return(df)
}
if (n_frames != 2) {
print("non ancora sviluppato quando numero di frames > 2")
}
}
produce_dataframe(100, overlap_size = 0.2, n_frame = 3)
total_cost <- function(n_A, n_B, c_A, c_B) {
total_cost <- c_A*n_A + c_B*n_B
return(total_cost)
}
produce_dataframe(100, overlap_size = 0.2, n_frame = 2)
rep("a", N)
rep("a", 100)
paste0(rep("a", 100), rep("b", 100))
produce_dataframe <- function(N, overlap_size, n_frames) {
y <- rnorm(N)
id <- 1:N
if (n_frames == 2) {
N_A <- N/2+N*overlap_size
id_A <- sort(sample(1:N, N_A))
id_B <- sort(c(id[!(id %in% id_A)], sample(id_A, N*overlap_size)))
df <- data.frame(id = 1:N, y = y, A = numeric(N), B = numeric(N))
df[id_A,]$A <- 1
df[id_B,]$B <- 1
df$domain[df$A == 1 & df$B == 0] <-  "a"
df$domain[df$A == 0 & df$B == 1] <-  "b"
df$domain[df$A == 1 & df$B == 1] <-  "ab"
return(df)
}
if (n_frames != 2) {
print("non ancora sviluppato quando numero di frames > 2")
}
}
produce_dataframe(100, overlap_size = 0.2, n_frame = 2)
produce_dataframe <- function(N, f_a, f_b, overlap_size, n_frames) {
y <- rnorm(N)
id <- 1:N
if (n_frames == 2) {
N_A <- N*f_a+N*overlap_size
N_B <- N*f_b+N*overlap_size
id_A <- sort(sample(1:N, N_A))
id_B <- sort(c(id[!(id %in% id_A)], sample(id_A, N*overlap_size)))
df <- data.frame(id = 1:N, y = y, A = numeric(N), B = numeric(N))
df[id_A,]$A <- 1
df[id_B,]$B <- 1
df$domain[df$A == 1 & df$B == 0] <-  "a"
df$domain[df$A == 0 & df$B == 1] <-  "b"
df$domain[df$A == 1 & df$B == 1] <-  "ab"
return(df)
}
if (n_frames != 2) {
print("non ancora sviluppato quando numero di frames > 2")
}
}
produce_dataframe(N = 100, f_a = 0.09, f_b = 0.4, overlap_size = 0.5, n_frame = 2)
produce_dataframe(N = 100, f_a = 0.09, f_b = 0.4, overlap_size = 0.51, n_frame = 2)
?sample
overlap_sampling <- function(data, n, n_A) {
n_B <- n - n_A
s_A <- sample(data[data$A == 1], n_A, replace = FALSE)
s_B <- sample(data[data$B == 1], n_B, replace = FALSE)
s_a <- s_A %>% filter(domain == "a")
s_ab <- s_A %>% filter(domain == "ab") %>% bind_rows(s_B %>% filter(domain == "ab"))
s_b <- s_B %>% filter(domain == "b")
}
data <- produce_dataframe(N = 100, f_a = 0.09, f_b = 0.4, overlap_size = 0.51, n_frame = 2)
overlap_sampling(data, n = 20, n_A = 10)
data
data[data$A == 1]
data
data[data$A == 1]
overlap_sampling <- function(data, n, n_A) {
n_B <- n - n_A
s_A <- sample(data[data$A == 1 , ], n_A, replace = FALSE)
s_B <- sample(data[data$B == 1 , ], n_B, replace = FALSE)
s_a <- s_A %>% filter(domain == "a")
s_ab <- s_A %>% filter(domain == "ab") %>% bind_rows(s_B %>% filter(domain == "ab"))
s_b <- s_B %>% filter(domain == "b")
}
overlap_sampling(data = data, n = 20, n_A = 10)
overlap_sampling <- function(data, n, n_A) {
n_B <- n - n_A
s_A <- sample(data[data$A == 1 , ], n_A, replace = FALSE)
s_B <- sample(data[data$B == 1 , ], n_B, replace = FALSE)
s_a <- s_A %>% filter(domain == "a")
s_ab <- s_A %>% filter(domain == "ab") %>% bind_rows(s_B %>% filter(domain == "ab"))
s_b <- s_B %>% filter(domain == "b")
}
overlap_sampling(data = data, n = 10, n_A = 2)
data[data$A == 1 , ]
data[data$B == 1 , ]
overlap_sampling(data = data, n = 10, n_A = 2)
n = 10
n_A = 2
n_B <- n - n_A
n_B
sample(data[data$A == 1 , ], n_A, replace = FALSE)
data[data$A == 1 , ],
data[data$A == 1 , ]
n_A
sample(data[data$A == 1 , ], n_A, replace = FALSE)
dim(sample(data[data$A == 1 , ], n_A, replace = FALSE))
require(dplyr)
sample_n(data[data$A == 1 , ], n_A, replace = FALSE)
overlap_sampling <- function(data, n, n_A) {
n_B <- n - n_A
s_A <- sample_n(data[data$A == 1 , ], n_A, replace = FALSE)
s_B <- sample_n(data[data$B == 1 , ], n_B, replace = FALSE)
s_a <- s_A %>% filter(domain == "a")
s_ab <- s_A %>% filter(domain == "ab") %>% bind_rows(s_B %>% filter(domain == "ab"))
s_b <- s_B %>% filter(domain == "b")
}
overlap_sampling(data = data, n = 10, n_A = 2)
# how does the overlap happen?
overlap_sampling <- function(data, n, n_A) {
n_B <- n - n_A
s_A <- sample_n(data[data$A == 1 , ], n_A, replace = FALSE)
s_B <- sample_n(data[data$B == 1 , ], n_B, replace = FALSE)
s_a <- s_A %>% filter(domain == "a")
s_ab <- s_A %>% filter(domain == "ab") %>% bind_rows(s_B %>% filter(domain == "ab"))
s_b <- s_B %>% filter(domain == "b")
final_sample <- list(s_a, s_b, s_ab)
return(final_sample)
}
overlap_sampling(data = data, n = 10, n_A = 2)
overlap_sampling <- function(data, n, n_A) {
n_B <- n - n_A
s_A <- sample_n(data[data$A == 1 , ], n_A, replace = FALSE)
s_B <- sample_n(data[data$B == 1 , ], n_B, replace = FALSE)
s_a <- s_A %>% filter(domain == "a")
s_ab <- s_A %>% filter(domain == "ab") %>% bind_rows(s_B %>% filter(domain == "ab"))
s_b <- s_B %>% filter(domain == "b")
final_sample <- list(s_a = s_a, s_b = s_b, s_ab = s_ab)
return(final_sample)
}
overlap_sampling(data = data, n = 10, n_A = 2)
n = 10
n_A = 2
n_B <- n - n_A
n_B
s_A <- sample_n(data[data$A == 1 , ], n_A, replace = FALSE)
s_A
s_B <- sample_n(data[data$B == 1 , ], n_B, replace = FALSE)
s_B
s_a <- s_A %>% filter(domain == "a")
s_a
s_ab <- s_A %>% filter(domain == "ab") %>% bind_rows(s_B %>% filter(domain == "ab"))
s_ab
s_b <- s_B %>% filter(domain == "b")
s_b
overlap_sampling <- function(data, n, n_A) {
n_B <- n - n_A
s_A <- sample_n(data[data$A == 1 , ], n_A, replace = FALSE)
s_B <- sample_n(data[data$B == 1 , ], n_B, replace = FALSE)
s_a <- s_A %>% filter(domain == "a")
s_ab <- s_A %>% filter(domain == "ab") %>% bind_rows(s_B %>% filter(domain == "ab"))
s_b <- s_B %>% filter(domain == "b")
final_sample <- list(s_a = s_a, s_b = s_b, s_ab = s_ab)
return(final_sample)
}
overlap_sampling(data = data, n = 10, n_A = 5)
?attributes
scr_sampling <- function(data, n, n_A) {
n_B <- n - n_A
s_B <- sample_n(data[data$B == 1 , ], n_B, replace = FALSE)
s_b <- s_B %>% filter(domain == "b")
n_B_final <- nrow(s_b)
attributes(s_b) <- n_B_final
s_A <- sample_n(data[data$A == 1 , ], n_A, replace = FALSE)
n_A_final <- nrow(s_A)
attributes(s_A) <- n_A_final
final_sample <- list(s_A = s_A, s_b = s_b)
return(final_sample)
}
scr_sampling <- function(data, n, n_B) {
n_A <- n - n_B
s_B <- sample_n(data[data$B == 1 , ], n_B, replace = FALSE)
s_b <- s_B %>% filter(domain == "b")
n_B_final <- nrow(s_b)
attributes(s_b) <- n_B_final
s_A <- sample_n(data[data$A == 1 , ], n_A, replace = FALSE)
n_A_final <- nrow(s_A)
attributes(s_A) <- n_A_final
final_sample <- list(s_A = s_A, s_b = s_b)
return(final_sample)
}
scr_sampling(data = data, n = 10, n_B = 5)
attributes(s_A) <- list(n_A_final)
scr_sampling <- function(data, n, n_B) {
n_A <- n - n_B
s_B <- sample_n(data[data$B == 1 , ], n_B, replace = FALSE)
s_b <- s_B %>% filter(domain == "b")
n_B_final <- nrow(s_b)
attributes(s_b) <- list(n_B_final)
s_A <- sample_n(data[data$A == 1 , ], n_A, replace = FALSE)
n_A_final <- nrow(s_A)
attributes(s_A) <- list(n_A_final)
final_sample <- list(s_A = s_A, s_b = s_b)
return(final_sample)
}
scr_sampling(data = data, n = 10, n_B = 5)
n_A <- n - n_B
s_B <- sample_n(data[data$B == 1 , ], n_B, replace = FALSE)
s_b <- s_B %>% filter(domain == "b")
n_B_final <- nrow(s_b)
n_B_final
attributes(s_b)
attributes(s_b) <- list(final_sample_size = n_B_final)
attributes(s_b)
scr_sampling <- function(data, n, n_B) {
n_A <- n - n_B
s_B <- sample_n(data[data$B == 1 , ], n_B, replace = FALSE)
s_b <- s_B %>% filter(domain == "b")
n_B_final <- nrow(s_b)
attributes(s_b) <- list(final_sample_size = n_B_final)
s_A <- sample_n(data[data$A == 1 , ], n_A, replace = FALSE)
n_A_final <- nrow(s_A)
attributes(s_A) <- list(final_sample_size = n_A_final)
final_sample <- list(s_A = s_A, s_b = s_b)
return(final_sample)
}
scr_sampling(data = data, n = 10, n_B = 5)
ov_sampling(data = data, n = 10, n_A = 5)
ov_sampling <- function(data, n, n_A) {
n_B <- n - n_A
s_A <- sample_n(data[data$A == 1 , ], n_A, replace = FALSE)
s_B <- sample_n(data[data$B == 1 , ], n_B, replace = FALSE)
s_a <- s_A %>% filter(domain == "a")
s_ab <- s_A %>% filter(domain == "ab") %>% bind_rows(s_B %>% filter(domain == "ab"))
s_b <- s_B %>% filter(domain == "b")
final_sample <- list(s_a = s_a, s_b = s_b, s_ab = s_ab)
return(final_sample)
}
ov_sampling(data = data, n = 10, n_A = 5)
scr_sampling <- function(data, n, n_B) {
n_A <- n - n_B
s_B <- sample_n(data[data$B == 1 , ], n_B, replace = FALSE)
s_b <- s_B %>% filter(domain == "b")
s_A <- sample_n(data[data$A == 1 , ], n_A, replace = FALSE)
final_sample <- list(s_A = s_A, s_b = s_b)
return(final_sample)
}
scr_sampling(data = data, n = 10, n_B = 5)
scr_sampling(data = data, n = 10, n_B = 5)
scr_sampling(data = data, n = 10, n_B = 5)
ov_variance_A <- function(N_a, N_A, S_a, lambda, N_ab, N_A, S_ab) {
variance_A <- N_a*N_A*S_b^2 + lambda^2*N_ab*N_A*S_ab^2
return(variance_A)
}
ov_variance_A <- function(N_a, N_A, S_a, lambda, N_ab, N_A, S_ab) {
variance_A <- N_a*N_A*S_b^2 + lambda^2*N_ab*N_A*S_ab^2
return(variance_A)
}
N_a = 10; N_A = 2; S_a = 2; lambda = 10; N_ab = 4; N_A = 5; S_ab = 1
ov_variance_A <- function(N_a, N_A, S_a, lambda, N_ab, N_A, S_ab) {
variance_A <- N_a*N_A*S_b^2 + lambda^2*N_ab*N_A*S_ab^2
return(variance_A)
}
N_a*N_A
N_a*N_A*S_b^2
N_a*N_A*S_a^2
N_a*N_A*S_a^2 + lambda^2
N_a*N_A*S_a^2 + lambda^2*N_ab
N_a*N_A*S_a^2 + lambda^2*N_ab*N_A
N_a*N_A*S_a^2 + lambda^2*N_ab*N_A*S_ab^2
ov_variance_A <- function(N_a, N_A, S_a, lambda, N_ab, N_A, S_ab) {
variance_A <- N_a*N_A*S_a^2 + lambda^2*N_ab*N_A*S_ab^2
return(variance_A)
}
ov_variance_A <- function(N_a, N_A, S_a, lambda, N_ab, N_A, S_ab) {
variance_A <- N_a #*N_A*S_a^2 + lambda^2*N_ab*N_A*S_ab^2
return(variance_A)
}
ov_variance_A <- function(N_a, N_A, S_a, lambda, N_ab, S_ab) {
variance_A <- N_a*N_A*S_a^2 + lambda^2*N_ab*N_A*S_ab^2
return(variance_A)
}
N_a = 10; N_A = 2; S_a = 2; lambda = 10; N_ab = 4; N_A = 5; S_ab = 1
ov_variance(N_a = 10, N_A = 2, S_a = 2, lambda = 10, N_ab = 4, N_A = 5, S_ab = 1)
ov_variance_A(N_a = 10, N_A = 2, S_a = 2, lambda = 10, N_ab = 4, N_A = 5, S_ab = 1)
ov_variance_A(N_a = 10, N_A = 2, S_a = 2, lambda = 10, N_ab = 4, S_ab = 1)
ov_variance_A <- function(N_a, N_A, S_a, lambda, N_ab, S_ab) {
variance_A <- N_a*N_A*S_a^2 + lambda^2*N_ab*N_A*S_ab^2
return(variance_A)
}
ov_variance_A(N_a = 10, N_A = 2, S_a = 2, lambda = 10, N_ab = 4, S_ab = 1)
optimal_sample_size <- function(N_A, N_a, lambda, N_ab, ov_c_A, N_B, N_b, ov_c_B) {
alpha <- sqrt((N_A*(N_a+lambda^2*N_ab)/ov_c_A))*(sqrt(N_A*(N_a + lambda^2*N_ab)/ov_c_A) +
sqrt(N_B*(N_b+lambda^2*N_ab)/ov_c_B))
}
optimal_sample_size <- function(N_A, N_a, lambda, N_ab, ov_c_A, N_B, N_b, ov_c_B) {
alpha <- sqrt((N_A*(N_a+lambda^2*N_ab)/ov_c_A))*(sqrt(N_A*(N_a + lambda^2*N_ab)/ov_c_A) +
sqrt(N_B*(N_b+lambda^2*N_ab)/ov_c_B))
return(alpha)
}
optimal_sample_size(N_A = 10, N_a = 1, lambda = 2, N_ab = 3, ov_c_A = 3, N_B = 4, N_b = 1, ov_c_B = 2)
optimal_sample_size <- function(N_A, N_a, lambda, N_ab, ov_c_A, N_B, N_b, ov_c_B) {
alpha <- sqrt((N_A*(N_a+lambda^2*N_ab)/ov_c_A))*(sqrt(N_A*(N_a + lambda^2*N_ab)/ov_c_A) +
sqrt(N_B*(N_b+lambda^2*N_ab)/ov_c_B))
return(list(alpha = alpha))
}
optimal_sample_size(N_A = 10, N_a = 1, lambda = 2, N_ab = 3, ov_c_A = 3, N_B = 4, N_b = 1, ov_c_B = 2)
optimal_sample_size(N_A = 10, N_a = 1, lambda = 2, N_ab = 3, ov_c_A = 3, N_B = 4, N_b = 1, ov_c_B = 2)
ov_variance_A <- function(N_a, N_A, S_a, lambda, N_ab, S_ab) {
variance_A <- N_a*N_A*S_a^2 + lambda^2*N_ab*N_A*S_ab^2
return(list(variance_A = variance_A))
}
ov_variance_B <- function(N_n, N_B, S_b, lambda, N_ab, S_ab) {
variance_B <- N_b*N_B*S_b^2 + (1-lambda)^2*N_ab*N_B*S_ab^2
return(list(variance_B = variance_B))
}
